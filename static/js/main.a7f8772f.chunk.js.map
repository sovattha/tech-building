{"version":3,"sources":["en.js","fr.js","activities.js","authProvider.js","locale-switcher.js","Dashboard.js","theme.js","user-groups.js","users.js","work-times.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dashboard","welcome","localeSwitcher","chooseLanguage","user","list","search","resources","users","name","fields","id","password","email","address","street","mobile","phone","fax","userGroups","workTimes","userId","workName","analyticReference","date","activityId","workHours","projectManagers","activities","extraTime","expenses","vacationRequests","ActivityList","props","List","Datagrid","rowClick","TextField","source","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","role","LocaleSwitcher","translate","useTranslate","setLocale","useSetLocale","Button","variant","color","onClick","permissions","Card","Title","title","CardHeader","CardContent","theme","createMuiTheme","palette","primary","blue","secondary","grey","error","red","contrastThreshold","tonalOffset","typography","fontFamily","join","overrides","MuiButton","root","UserGroupList","UserGroupEdit","Edit","SimpleForm","TextInput","UserGroupCreate","Create","UserList","ReferenceArrayField","label","reference","SingleFieldList","ChipField","EmailField","UserEdit","validate","required","disabled","PasswordInput","ReferenceArrayInput","SelectArrayInput","optionText","UserCreate","UserFilter","Filter","alwaysOn","ReferenceInput","SelectInput","WorktimeList","filter","filters","sort","field","order","ReferenceField","link","DateField","locales","options","weekday","year","month","day","NumberField","defaultValue","WorktimeEdit","initialValues","DateInput","NumberInput","WorktimeCreate","history","createHistory","messages","fr","frenchMessages","frenchMessagesCustom","en","englishMessages","englishMessagesCustom","i18nProvider","polyglotI18nProvider","locale","httpClient","url","headers","Headers","Accept","token","set","fetchUtils","fetchJson","MyLoginPage","Login","backgroundImage","App","Admin","loginPage","dataProvider","jsonServerProvider","authProvider","Dashboard","Resource","edit","create","icon","WorktimeIcon","ListGuesser","ExtraTimeIcon","ExpensesIcon","VacationIcon","UserIcon","EditGuesser","SettingsIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7f8772f.chunk.js","sourcesContent":["module.exports = {\n    dashboard: {\n        welcome: 'Welcome',\n    },\n    localeSwitcher: {\n        chooseLanguage: 'Choose your language',\n    },\n    user: {\n        list: {\n            search: 'Search',\n        }\n    },\n    resources: {\n        users: {\n            name: 'User |||| Users',\n            fields: {\n                id: 'Identifier',\n                name: 'Name',\n                password: 'Password',\n                email: 'Email address',\n                address: {\n                    street: 'Address'\n                },\n                mobile: 'Mobile phone',\n                phone: 'Landline phone',\n                fax: 'Fax',\n                userGroups: 'Groups',\n            }\n        },\n        workTimes: {\n            name: 'Hours worked',\n            fields: {\n                id: 'Identifier',\n                userId: 'User',\n                workName: 'Site',\n                analyticReference: 'Analytical reference',\n                date: 'Date',\n                activityId: 'Activity',\n                workHours: 'Hours worked',\n                projectManagers: 'Project managers',\n            }\n        },\n        activities: {\n            name: 'Activities',\n            fields: {\n                id: 'Identifier',\n                name: 'Name',\n            }\n        },\n        userGroups: {\n            name: 'User groups',\n            fields: {\n                id: 'Identifier',\n                name: 'Name',\n            }\n        }\n    }\n};","module.exports = {\n    dashboard: {\n        welcome: 'Bienvenue',\n    },\n    localeSwitcher: {\n        chooseLanguage: 'Choisissez votre langue',\n    },\n    user: {\n        list: {\n            search: 'Rechercher',\n        }\n    },\n    resources: {\n        extraTime: {\n            name: 'Heures supplémentaires',\n        },\n        expenses: {\n            name: 'Note de frais',\n        },\n        vacationRequests: {\n            name: 'Demande de congés',\n        },\n        users: {\n            name: 'Utilisateur |||| Utilisateurs',\n            fields: {\n                id: 'Identifiant',\n                name: 'Nom',\n                password: 'Mot de passe',\n                email: 'Adresse e-mail',\n                address: {\n                    street: 'Adresse'\n                },\n                mobile: 'Téléphone mobile',\n                phone: 'Téléphone fixe',\n                fax: 'Fax',\n                userGroups: 'Groupes',\n            }\n        },\n        workTimes: {\n            name: 'Heures travaillées',\n            fields: {\n                id: 'Identifiant',\n                userId: 'Utilisateur',\n                workName: 'Chantier',\n                analyticReference: 'Référence analytique',\n                date: 'Date',\n                activityId: 'Activité',\n                workHours: 'Heures travaillées',\n                projectManagers: 'Chefs de projets',\n            }\n        },\n        activities: {\n            name: 'Activités',\n            fields: {\n                id: 'Identifiant',\n                name: 'Nom',\n            }\n        },\n        userGroups: {\n            name: 'Groupes d\\'utilisateur',\n            fields: {\n                id: 'Identifiant',\n                name: 'Nom',\n            }\n        }\n    }\n};\n","import React from 'react';\nimport { Datagrid, List, TextField } from 'react-admin';\n\nexport const ActivityList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n        </Datagrid>\n    </List>\n);","export default {\n    // called when the user attempts to log in\n    login: ({ username, password }) => {\n        localStorage.setItem('username', username);\n        localStorage.setItem('token', '1234567890');\n        if (username === 'aavian') {\n            localStorage.setItem('permissions', 'admin');\n        } else {\n            localStorage.setItem('permissions', 'user');\n        }\n        // accept all username/password combinations\n        return Promise.resolve();\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            localStorage.removeItem('token');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('token')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => {\n        const role = localStorage.getItem('permissions');\n        return role ? Promise.resolve(role) : Promise.reject();\n    }\n};","import Button from '@material-ui/core/Button';\nimport React from 'react';\nimport { useSetLocale, useTranslate } from 'react-admin';\n\nconst LocaleSwitcher = () => {\n    const translate = useTranslate();\n    const setLocale = useSetLocale();\n    return (\n        <div>\n            <h3>{translate('localeSwitcher.chooseLanguage')}</h3>\n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setLocale('en')}>English</Button>\n                &nbsp;\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setLocale('fr')}>Français</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default LocaleSwitcher;","import { CardHeader } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport React from 'react';\nimport { Title, useTranslate } from 'react-admin';\nimport LocaleSwitcher from './locale-switcher';\n\nexport default ({ permissions }) => {\n    const translate = useTranslate();\n    return <Card>\n        <Title title={translate('ra.page.dashboard')} />\n        <CardHeader title={`${translate('dashboard.welcome')} ${localStorage.getItem('username')}`}></CardHeader>\n        <CardContent>\n            <LocaleSwitcher />\n        </CardContent>\n        {permissions === 'admin'\n            ? <CardContent></CardContent>\n            : null\n        }\n    </Card>;\n};","\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nimport blue from '@material-ui/core/colors/blue';\nimport grey from '@material-ui/core/colors/grey';\nimport red from '@material-ui/core/colors/red';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n        secondary: grey,\n        error: red,\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n    },\n    typography: {\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n            'Muli',\n            'Arial',\n            'Tahoma',\n            'sans-serif',\n        ].join(','),\n    },\n    overrides: {\n        MuiButton: { // override the styles of all instances of this component\n            root: { // Name of the rule\n                color: 'white', // Some CSS\n            },\n        },\n    },\n});\n\nexport default theme;","import React from 'react';\nimport { List, Datagrid, TextField, Edit, SimpleForm, TextInput, Create } from 'react-admin';\n\nexport const UserGroupList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n        </Datagrid>\n    </List>\n);\n\nexport const UserGroupEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" />\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const UserGroupCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" />\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Create>\n);","import React from 'react';\nimport { ChipField, Create, Datagrid, Edit, EmailField, List, PasswordInput, ReferenceArrayField, ReferenceArrayInput, required, SelectArrayInput, SimpleForm, SingleFieldList, TextField, TextInput } from 'react-admin';\n\nexport const UserList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <ReferenceArrayField label=\"Groupes\" reference=\"userGroups\" source=\"userGroups\">\n                <SingleFieldList>\n                    <ChipField source=\"name\" />\n                </SingleFieldList>\n            </ReferenceArrayField>\n            <EmailField source=\"email\" />\n            <TextField source=\"phone\" />\n        </Datagrid>\n    </List>\n);\n\nexport const UserEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" validate={[required()]} disabled />\n            <TextInput source=\"name\" validate={[required()]} />\n            <PasswordInput source=\"password\" validate={[required()]} />\n            <ReferenceArrayInput reference=\"userGroups\" source=\"userGroups\" validate={[required()]}>\n                <SelectArrayInput optionText=\"name\" />\n            </ReferenceArrayInput>\n            <TextInput source=\"email\" validate={[required()]} />\n            <TextInput source=\"address.street\" />\n            <TextInput source=\"mobile\" />\n            <TextInput source=\"phone\" />\n            <TextInput source=\"fax\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport const UserCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" validate={[required()]} />\n            <PasswordInput source=\"password\" validate={[required()]} />\n            <ReferenceArrayInput reference=\"userGroups\" source=\"userGroups\" validate={[required()]}>\n                <SelectArrayInput optionText=\"name\" />\n            </ReferenceArrayInput>\n            <TextInput source=\"email\" validate={[required()]} />\n            <TextInput source=\"address.street\" />\n            <TextInput source=\"mobile\" />\n            <TextInput source=\"phone\" />\n            <TextInput source=\"fax\" />\n        </SimpleForm>\n    </Create>\n);","import React from 'react';\nimport { required, Filter, ChipField, Create, Datagrid, DateField, DateInput, Edit, List, NumberField, NumberInput, ReferenceArrayField, ReferenceArrayInput, ReferenceField, ReferenceInput, SelectArrayInput, SelectInput, SimpleForm, SingleFieldList, TextField, TextInput } from 'react-admin';\n\nconst UserFilter = ({ permissions, ...props }) =>\n    <Filter {...props}>\n        <TextInput\n            label=\"user.list.search\"\n            source=\"q\"\n            alwaysOn\n        />\n        <ReferenceInput  source=\"activityId\" reference=\"activities\" validate={[required()]}>\n            <SelectInput optionText=\"name\" />\n        </ReferenceInput>\n        {permissions === 'admin' ? <TextInput source=\"analyticReference\" /> : null}\n    </Filter>;\n\nexport const WorktimeList = ({ permissions, ...props }) => (\n    <List {...props}\n    filter={permissions !== 'admin' && { userId: localStorage.getItem('username') }}\n    filters={<UserFilter permissions={permissions} {...props} />}\n    sort={{ field: 'name', order: 'ASC' }}>\n        <Datagrid rowClick=\"edit\">\n            {permissions === 'admin' && <TextField source=\"id\" />}\n            <TextField source=\"workName\" />\n            <ReferenceField reference=\"activities\" source=\"activityId\" link={false}>\n                <TextField source=\"name\" />\n            </ReferenceField>\n            <TextField source=\"analyticReference\" />\n            <ReferenceArrayField reference=\"users\" source=\"projectManagers\">\n                <SingleFieldList>\n                    <ChipField source=\"name\" />\n                </SingleFieldList>\n            </ReferenceArrayField>\n            <DateField source=\"date\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n            <NumberField source=\"workHours\" />\n        </Datagrid>\n    </List>\n);\n\nconst defaultValue = {\n    userId: localStorage.getItem('username'),\n    workName: 'test'\n};\nexport const WorktimeEdit = ({ permissions, ...props }) => (\n    <Edit {...props}>\n        <SimpleForm initialValues={defaultValue}>\n            {permissions === 'admin' && <TextInput disabled source=\"id\" />}\n            <ReferenceInput source=\"userId\" reference=\"users\" disabled>\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"workName\" validate={[required()]} />\n            <TextInput source=\"analyticReference\" validate={[required()]} />\n            <DateInput source=\"date\" validate={[required()]} />\n            <ReferenceInput  source=\"activityId\" reference=\"activities\" validate={[required()]}>\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <NumberInput source=\"workHours\" validate={[required()]} />\n            <ReferenceArrayInput reference=\"users\" source=\"projectManagers\" validate={[required()]}>\n                <SelectArrayInput optionText=\"name\" />\n            </ReferenceArrayInput>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const WorktimeCreate = ({ permissions, ...props }) => (\n    <Create {...props}>\n        <SimpleForm initialValues={defaultValue}>\n            <ReferenceInput source=\"userId\" reference=\"users\" disabled={permissions !== 'admin'}>\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"workName\" validate={[required()]} />\n            <TextInput source=\"analyticReference\" validate={[required()]} />\n            <DateInput source=\"date\" validate={[required()]} />\n            <ReferenceInput  source=\"activityId\" reference=\"activities\" validate={[required()]}>\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <NumberInput source=\"workHours\" validate={[required()]} />\n            <ReferenceArrayInput reference=\"users\" source=\"projectManagers\" validate={[required()]}>\n                <SelectArrayInput optionText=\"name\" />\n            </ReferenceArrayInput>\n        </SimpleForm>\n    </Create>\n);\n\n","import ExtraTimeIcon from '@material-ui/icons/AlarmAdd';\nimport VacationIcon from '@material-ui/icons/BeachAccess';\nimport ExpensesIcon from '@material-ui/icons/Euro';\nimport UserIcon from '@material-ui/icons/Group';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport WorktimeIcon from '@material-ui/icons/Timer';\nimport { createBrowserHistory as createHistory } from 'history';\nimport jsonServerProvider from 'ra-data-json-server';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\nimport englishMessages from 'ra-language-english';\nimport frenchMessages from 'ra-language-french';\nimport React from 'react';\nimport { Admin, EditGuesser, fetchUtils, ListGuesser, Resource, Login } from 'react-admin';\nimport { ActivityList } from './activities';\nimport authProvider from './authProvider';\nimport Dashboard from './Dashboard';\nimport englishMessagesCustom from './en';\nimport frenchMessagesCustom from './fr';\nimport theme from './theme';\nimport { UserGroupCreate, UserGroupEdit, UserGroupList } from './user-groups';\nimport { UserCreate, UserEdit, UserList } from './users';\nimport { WorktimeCreate, WorktimeEdit, WorktimeList } from './work-times';\nconst history = createHistory();\n\nconst messages = {\n    fr: {...frenchMessages, ...frenchMessagesCustom},\n    en: {...englishMessages, ...englishMessagesCustom},\n};\nconst i18nProvider = polyglotI18nProvider(locale => messages[locale], 'fr');\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    const token = localStorage.getItem('token');\n    options.headers.set('Authorization', `Bearer ${token}`);\n    return fetchUtils.fetchJson(url, options);\n};\n\nconst MyLoginPage = () => (\n    <Login\n        // A random image that changes everyday\n        backgroundImage=\"https://source.unsplash.com/1600x900/?construction\"\n    />\n);\n\nconst App = () => (\n    <Admin\n        loginPage={MyLoginPage}\n        history={history}\n        title='Tech building'\n        locale=\"fr\"\n        theme={theme}\n        dataProvider={jsonServerProvider(\n            'https://my-json-server.typicode.com/sovattha/tech-building',\n            httpClient\n        )}\n        authProvider={authProvider}\n        i18nProvider={i18nProvider}\n        dashboard={Dashboard}\n    >\n        {permissions => [\n            <Resource\n                name=\"workTimes\"\n                list={WorktimeList}\n                edit={WorktimeEdit}\n                create={WorktimeCreate}\n                icon={WorktimeIcon}\n            />,\n            <Resource name=\"extraTime\" list={ListGuesser} icon={ExtraTimeIcon} />,\n            <Resource name=\"expenses\" list={ListGuesser} icon={ExpensesIcon} />,\n            <Resource name=\"vacationRequests\" list={ListGuesser} icon={VacationIcon} />,\n            <Resource\n                name=\"users\"\n                icon={UserIcon}\n                list={UserList}\n                edit={permissions === 'admin' ? UserEdit : null}\n                create={permissions === 'admin' ? UserCreate : null}\n            />,\n            <Resource\n                name=\"activities\"\n                list={permissions === 'admin' ? ActivityList : null}\n                edit={permissions === 'admin' ? EditGuesser : null}\n                create={permissions === 'admin' ? EditGuesser : null}\n                icon={SettingsIcon}\n            />,\n            <Resource\n                name=\"userGroups\"\n                list={permissions === 'admin' ? UserGroupList : null}\n                edit={permissions === 'admin' ? UserGroupEdit : null}\n                create={permissions === 'admin' ? UserGroupCreate : null}\n                icon={SettingsIcon}\n            />,\n        ]}\n    </Admin>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}